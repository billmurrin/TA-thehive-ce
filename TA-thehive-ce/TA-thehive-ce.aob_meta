{"basic_builder": {"version": "1.0.0", "small_icon": "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", "description": "TA TheHive Cloud Edition (it provides action to create alerts in thehive)", "friendly_name": "thehive-ce", "theme": "#ffde63", "author": "remg427@gmail.com", "appname": "TA-thehive-ce", "tab_version": "2.2.0", "tab_build_no": "12", "visible": true, "build_no": 1, "large_icon": "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"}, "alert_action_builder": {"modular_alerts": [{"code": "\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets the setup parameters and prints them to the log\n    thehive_api_key1 = helper.get_global_setting(\"thehive_api_key1\")\n    helper.log_info(\"thehive_api_key1={}\".format(thehive_api_key1))\n    thehive_api_key2 = helper.get_global_setting(\"thehive_api_key2\")\n    helper.log_info(\"thehive_api_key2={}\".format(thehive_api_key2))\n    thehive_api_key3 = helper.get_global_setting(\"thehive_api_key3\")\n    helper.log_info(\"thehive_api_key3={}\".format(thehive_api_key3))\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    th_instance = helper.get_param(\"th_instance\")\n    helper.log_info(\"th_instance={}\".format(th_instance))\n\n    th_case_template = helper.get_param(\"th_case_template\")\n    helper.log_info(\"th_case_template={}\".format(th_case_template))\n\n    th_type = helper.get_param(\"th_type\")\n    helper.log_info(\"th_type={}\".format(th_type))\n\n    th_source = helper.get_param(\"th_source\")\n    helper.log_info(\"th_source={}\".format(th_source))\n\n    th_unique_id = helper.get_param(\"th_unique_id\")\n    helper.log_info(\"th_unique_id={}\".format(th_unique_id))\n\n    th_title = helper.get_param(\"th_title\")\n    helper.log_info(\"th_title={}\".format(th_title))\n\n    th_description = helper.get_param(\"th_description\")\n    helper.log_info(\"th_description={}\".format(th_description))\n\n    th_tags = helper.get_param(\"th_tags\")\n    helper.log_info(\"th_tags={}\".format(th_tags))\n\n    th_severity = helper.get_param(\"th_severity\")\n    helper.log_info(\"th_severity={}\".format(th_severity))\n\n    th_tlp = helper.get_param(\"th_tlp\")\n    helper.log_info(\"th_tlp={}\".format(th_tlp))\n\n    th_pap = helper.get_param(\"th_pap\")\n    helper.log_info(\"th_pap={}\".format(th_pap))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action thehive_ce_alert started.\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "label": "thehive-ce-alert", "description": "Create alert in TheHive", "largeIcon": "", "uuid": "f7d05d464d8049d7a5c034f58584b070", "parameters": [{"label": "TheHive instance", "type": "", "value": "", "format_type": "text", "required": true, "help_string": "Indicates one of the instances defined in lookup 'thehive_instances.csv'", "name": "th_instance", "default_value": ""}, {"label": "Case Template", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "The case template to use for imported alerts.", "name": "th_case_template", "default_value": ""}, {"label": "Type", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "The alert type. Defaults to \"alert\".", "name": "th_type", "default_value": ""}, {"label": "Source", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "The alert source. Defaults to \"splunk\".", "name": "th_source", "default_value": ""}, {"label": "Unique ID", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "A field name that contains a unique identifier specific to the source event.", "name": "th_unique_id", "default_value": ""}, {"label": "Title", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "The title to use for created alerts. IMPORTANT you can specify a field name that contains the title text..", "name": "th_title", "default_value": ""}, {"label": "Description", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "The description to send with the alert. IMPORTANT You can specify a field name that contains the description text.", "name": "th_description", "default_value": ""}, {"label": "Tag(s)", "type": "", "value": "", "format_type": "text", "required": false, "help_string": "Use single comma-separated string without quotes for multiple tags (ex. \"badIP,spam\").", "name": "th_tags", "default_value": ""}, {"label": "Severity", "type": "", "value": "3", "format_type": "dropdownlist", "required": true, "help_string": "Select the severity of the created alert. Defaults is High", "name": "th_severity", "possible_values": {"High": "3", "Medium": "2", "Low": "1"}, "default_value": "3"}, {"label": "TLP:", "type": "", "value": "2", "format_type": "dropdownlist", "required": true, "help_string": "Select the TLP level of the created alert. Default is TLP:AMBER", "name": "th_tlp", "possible_values": {"WHITE": "0", "AMBER": "2", "RED": "3", "GREEN": "1"}, "default_value": "2"}, {"label": "PAP:", "type": "", "value": "2", "format_type": "dropdownlist", "required": true, "help_string": "Permissible Action Protocol. Default to PAP:AMBER", "name": "th_pap", "possible_values": {"WHITE": "0", "AMBER": "2", "RED": "3", "GREEN": "1"}, "default_value": "2"}], "smallIcon": "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", "active_response": {"technology": [{"version": ["3.4.0"], "product": "TheHive", "vendor": "TheHive-project"}], "task": ["create"], "subject": ["threat.artifact"], "category": ["Information Gathering"], "supports_adhoc": true}, "short_name": "thehive_ce_alert"}]}, "validation": {}, "data_input_builder": {"datainputs": [{"customized_options": [{"name": "fake_input_parameter", "value": ""}], "type": "customized", "description": "fake_input_tobedeleted_donotuse. No event collection is coded nor needed.\nPut big number on collection interval", "parameters": [{"placeholder": "", "label": "fake_input_parameter", "type": "text", "format_type": "text", "default_value": "", "required": false, "help_string": "", "name": "fake_input_parameter", "value": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # fake_input_parameter = definition.parameters.get('fake_input_parameter', None)\n    pass\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_fake_input_parameter = helper.get_arg('fake_input_parameter')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_fake_input_parameter = helper.get_arg('fake_input_parameter', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_thehive_api_key1 = helper.get_global_setting(\"thehive_api_key1\")\n    global_thehive_api_key2 = helper.get_global_setting(\"thehive_api_key2\")\n    global_thehive_api_key3 = helper.get_global_setting(\"thehive_api_key3\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "uuid": "7d602e29be1248faa29dc8784b55071c", "interval": "1000000", "data_inputs_options": [{"required_on_create": false, "title": "fake_input_parameter", "type": "customized_var", "description": "", "format_type": "text", "placeholder": "", "name": "fake_input_parameter", "required_on_edit": false, "default_value": ""}], "sourcetype": "fake_input_tobedeleted_donotuse", "title": "fake_input_tobedeleted_donotuse", "streaming_mode_xml": true, "name": "fake_input_tobedeleted_donotuse", "index": "default", "use_external_validation": true}]}, "sourcetype_builder": {"fake_input_tobedeleted_donotuse": {"metadata": {"event_count": 0, "cims_count": 0, "extractions_count": 0, "data_input_name": "fake_input_tobedeleted_donotuse"}}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "customized_settings": [{"help_string": "Set the API key of instance(s) of TheHive (see documentation on https://github.com/remg427/TA-thehive-ce", "label": "thehive_api_key1", "type": "password", "value": "", "format_type": "password", "required": true, "placeholder": "", "name": "thehive_api_key1", "default_value": ""}, {"help_string": "You may define additional API keys if you have additional instances of TheHive", "label": "thehive_api_key2", "type": "password", "value": "", "format_type": "password", "required": false, "placeholder": "", "name": "thehive_api_key2", "default_value": ""}, {"help_string": "You may define additional API keys if you have additional instances of TheHive", "label": "thehive_api_key3", "type": "password", "value": "", "format_type": "password", "required": false, "placeholder": "", "name": "thehive_api_key3", "default_value": ""}], "log_settings": {"log_level": "DEBUG"}}}}